import React, { useState, useEffect } from 'react';
import './gpa.css';

const GPACalculator = () => {
Â  const subjects = [
Â  Â  'Introduction to Economics', 'Mathematical Methods', 'Business and Management in a Global Context', 'Introduction to Mathematical Statistics',
Â  Â  'Advanced Statistics: Statistical Inference', 'Advanced Statistics: Distribution Theory', 'Business Analytics: Applied Modelling and Prediction', 'Programming for Data Science',
Â  Â  'Abstract Mathematics/Information Systems/Econometrics', 'Statistical Methods for Market Research', 'Machine Learning', 'Elective1', 'Elective2'
Â  ];

Â  const [grades, setGrades] = useState(Array(subjects.length).fill(''));
Â  const [honorsClass, setHonorsClass] = useState('');
Â  const [classificationMarksBreakdown, setClassificationMarksBreakdown] = useState({
Â  Â  firstClass: 0,
Â  Â  upperSecondClass: 0,
Â  Â  lowerSecondClass: 0,
Â  Â  thirdClass: 0,
Â  });
Â  const [averageClassificationMark, setAverageClassificationMark] = useState(0);

Â  const handleGradeChange = (index, value) => {
Â  Â  const newGrades = [...grades];
Â  Â  newGrades[index] = value;
Â  Â  setGrades(newGrades);
Â  };

Â  const getGradeDescription = (grade) => {
Â  Â  if (grade >= 70) return 'First Class';
Â  Â  if (grade >= 60) return 'Upper Second Class';
Â  Â  if (grade >= 50) return 'Lower Second Class';
Â  Â  if (grade >= 40) return 'Third Class';
Â  Â  return 'Fail';
Â  };

Â  useEffect(() => {
Â  Â  // Calculate classification marks
Â  Â  const classificationMarks = [];

Â  Â  // Year 1 subjects (first 4): Each contributes 2 marks
Â  Â  const yearOneGrades = grades.slice(0, 4).map(Number).filter(g => !isNaN(g));
Â  Â  if (yearOneGrades.length === 4) {
Â  Â  Â  const yearOneAverage = yearOneGrades.reduce((sum, grade) => sum + grade, 0) / yearOneGrades.length;
Â  Â  Â  classificationMarks.push(...Array(2).fill(yearOneAverage)); // Counted as 2 marks
Â  Â  }

Â  Â  // Advanced Statistics (subjects 5 and 6): Each contributes 1 mark
Â  Â  const advancedStatsGrades = grades.slice(4, 6).map(Number).filter(g => !isNaN(g));
Â  Â  classificationMarks.push(...advancedStatsGrades); // Counted as 1 mark each

Â  Â  // Remaining subjects (subjects 7 to 13): Each contributes 2 marks
Â  Â  const remainingGrades = grades.slice(6).map(Number).filter(g => !isNaN(g));
Â  Â  remainingGrades.forEach(grade => {
Â  Â  Â  classificationMarks.push(...Array(2).fill(grade)); // Counted as 2 marks each
Â  Â  });

Â  Â  // Check for failed subjects
Â  Â  const hasFailedSubject = classificationMarks.some(g => g < 40);
Â  Â  if (hasFailedSubject) {
Â  Â  Â  setHonorsClass('Resit required for failed subjects to pass the degree');
Â  Â  Â  return;
Â  Â  }

Â  Â  // Count classification marks
Â  Â  const firstClassCount = classificationMarks.filter(g => g >= 70).length;
Â  Â  const upperSecondClassCount = classificationMarks.filter(g => g >= 60 && g < 70).length;
Â  Â  const lowerSecondClassCount = classificationMarks.filter(g => g >= 50 && g < 60).length;
Â  Â  const thirdClassCount = classificationMarks.filter(g => g >= 40 && g < 50).length;

Â  Â  // Update classification marks breakdown
Â  Â  setClassificationMarksBreakdown({
Â  Â  Â  firstClass: firstClassCount,
Â  Â  Â  upperSecondClass: upperSecondClassCount,
Â  Â  Â  lowerSecondClass: lowerSecondClassCount,
Â  Â  Â  thirdClass: thirdClassCount,
Â  Â  });

Â  Â  // Calculate average classification mark
Â  Â  const avgClassificationMark = classificationMarks.length > 0
Â  Â  Â  ? classificationMarks.reduce((sum, grade) => sum + grade, 0) / classificationMarks.length
Â  Â  Â  : 0;
Â  Â  setAverageClassificationMark(avgClassificationMark);

Â  Â  // Determine honors class
Â  Â  if (firstClassCount >= 10 || (firstClassCount >= 8 && avgClassificationMark >= 65)) {
Â  Â  Â  setHonorsClass('First Class Honours');
Â  Â  } else if (upperSecondClassCount + firstClassCount >= 10 || (upperSecondClassCount + firstClassCount >= 8 && avgClassificationMark >= 56)) {
Â  Â  Â  setHonorsClass('Upper Second Class Honours');
Â  Â  } else if (lowerSecondClassCount + upperSecondClassCount + firstClassCount >= 10 || (lowerSecondClassCount + upperSecondClassCount + firstClassCount >= 8 && avgClassificationMark >= 47)) {
Â  Â  Â  setHonorsClass('Lower Second Class Honours');
Â  Â  } else if (thirdClassCount + lowerSecondClassCount + upperSecondClassCount + firstClassCount >= 10) {
Â  Â  Â  setHonorsClass('Third Class Honours');
Â  Â  } else {
Â  Â  Â  setHonorsClass('Not Classified');
Â  Â  }
Â  }, [grades]);

Â  return (
Â  Â  <div className="gpa-calculator">
Â  Â  Â  <h2>Grade Calculator</h2>
Â  Â  Â  <div className="calculator-intro">
Â  Â  Â  Â  <ul>
Â  Â  Â  Â  Â  <li>Year One: Average of all subjects (counted as 2 marks)</li>
Â  Â  Â  Â  Â  <li>Advanced Statistics: (each module counted as 1 mark)</li>
Â  Â  Â  Â  Â  <li>Remaining subjects: Each counted as 2 marks</li>
Â  Â  Â  Â  </ul>
Â  Â  Â  </div>
Â  Â  Â  <table className="grading-system">
Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <th>Honours Class</th>
Â  Â  Â  Â  Â  Â  <th>Criteria</th>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  </thead>
Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>First Class Honours</td>
Â  Â  Â  Â  Â  Â  <td>Ten first-class marks OR Eight first-class marks and an average classification mark of at least 65</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>Upper Second Class Honours</td>
Â  Â  Â  Â  Â  Â  <td>Ten upper second-class marks OR Eight upper second-class marks and an average classification mark of at least 56</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>Lower Second Class Honours</td>
Â  Â  Â  Â  Â  Â  <td>Ten lower second-class marks OR Eight lower second-class marks and an average classification mark of at least 47</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>Third Class Honours</td>
Â  Â  Â  Â  Â  Â  <td>Passed at least 330 credits and attempted 360 credits</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  </tbody>
Â  Â  Â  </table>
Â  Â  Â  <table className="grade-range-table">
Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <th>Grade Range</th>
Â  Â  Â  Â  Â  Â  <th>Description</th>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  </thead>
Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>70-100%</td>
Â  Â  Â  Â  Â  Â  <td>First Class</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>60-69%</td>
Â  Â  Â  Â  Â  Â  <td>Upper Second Class</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>50-59%</td>
Â  Â  Â  Â  Â  Â  <td>Lower Second Class</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>40-49%</td>
Â  Â  Â  Â  Â  Â  <td>Third Class</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>0-39%</td>
Â  Â  Â  Â  Â  Â  <td>Fail</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  </tbody>
Â  Â  Â  </table>
Â  Â  Â  <table className="subject-table">
Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <th>Subject</th>
Â  Â  Â  Â  Â  Â  <th>Grade</th>
Â  Â  Â  Â  Â  Â  <th>Description</th>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  </thead>
Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  {subjects.map((subject, index) => (
Â  Â  Â  Â  Â  Â  <React.Fragment key={index}>
Â  Â  Â  Â  Â  Â  Â  <tr className={`subject-row ${index < 4 ? 'core-subject' : index < 6 ? 'advanced-subject' : ''}`}>
Â  Â  Â  Â  Â  Â  Â  Â  <td>{subject}</td>
Â  Â  Â  Â  Â  Â  Â  Â  <td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  min="0"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  max="100"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={grades[index]}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => handleGradeChange(index, e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Enter grade"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  <td className="grade-description" data-grade={grades[index] !== '' ? getGradeDescription(Number(grades[index])) : ''}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {grades[index] !== '' ? getGradeDescription(Number(grades[index])) : ''}
Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  </React.Fragment>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </tbody>
Â  Â  Â  {/* Show getting started message when no grades are entered */}
Â  Â  Â  {grades.every(grade => !grade || isNaN(Number(grade)) || Number(grade) === 0) && (
Â  Â  Â  Â  <div className="getting-started-section">
Â  Â  Â  Â  Â  <div className="getting-started-content">
Â  Â  Â  Â  Â  Â  <h3>ðŸ“Š Grade Calculator</h3>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <p className="tip">ðŸ’¡ <strong>Remember:</strong> Year 1 subjects are averaged together (count as 2 marks), Advanced Statistics subjects count as 1 mark each, and all other subjects count as 2 marks each.</p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  Â  <div className="grade-breakdown-section">
Â  Â  Â  Â  Â  <h3>Current Grades Breakdown:</h3>
Â  Â  Â  Â  Â  <div className="current-grades-grid">
Â  Â  Â  Â  Â  Â  {/* Year 1 Subjects (grouped together) */}
Â  Â  Â  Â  Â  Â  {(() => {
Â  Â  Â  Â  Â  Â  Â  const yearOneGrades = grades.slice(0, 4).map(Number).filter(g => !isNaN(g) && g > 0);
Â  Â  Â  Â  Â  Â  Â  if (yearOneGrades.length === 4) {
Â  Â  Â  Â  Â  Â  Â  Â  const yearOneAverage = yearOneGrades.reduce((sum, grade) => sum + grade, 0) / yearOneGrades.length;
Â  Â  Â  Â  Â  Â  Â  Â  const gradeClass = yearOneAverage >= 70 ? 'first-class' :
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â yearOneAverage >= 60 ? 'upper-second-class' :
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â yearOneAverage >= 50 ? 'lower-second-class' : 'third-class';
Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`grade-item ${gradeClass}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grade-label">Year 1 Average</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grade-value">{yearOneAverage.toFixed(1)}%</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grade-description">{getGradeDescription(yearOneAverage)}</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grade-weight">Counts as 2 marks</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  return null;
Â  Â  Â  Â  Â  Â  })()}

Â  Â  Â  Â  Â  Â  {/* Advanced Statistics subjects (index 4, 5) */}
Â  Â  Â  Â  Â  Â  {grades.slice(4, 6).map((grade, index) => {
Â  Â  Â  Â  Â  Â  Â  const gradeValue = Number(grade);
Â  Â  Â  Â  Â  Â  Â  if (!isNaN(gradeValue) && gradeValue > 0) {
Â  Â  Â  Â  Â  Â  Â  Â  const actualIndex = index + 4;
Â  Â  Â  Â  Â  Â  Â  Â  const gradeClass = gradeValue >= 70 ? 'first-class' :
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â gradeValue >= 60 ? 'upper-second-class' :
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â gradeValue >= 50 ? 'lower-second-class' : 'third-class';
Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={actualIndex} className={`grade-item ${gradeClass}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grade-label">{subjects[actualIndex]}</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grade-value">{gradeValue}%</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grade-description">{getGradeDescription(gradeValue)}</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grade-weight">Counts as 1 mark</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  return null;
Â  Â  Â  Â  Â  Â  })}

Â  Â  Â  Â  Â  Â  {/* Remaining subjects (index 6+) */}
Â  Â  Â  Â  Â  Â  {grades.slice(6).map((grade, index) => {
Â  Â  Â  Â  Â  Â  Â  const gradeValue = Number(grade);
Â  Â  Â  Â  Â  Â  Â  if (!isNaN(gradeValue) && gradeValue > 0) {
Â  Â  Â  Â  Â  Â  Â  Â  const actualIndex = index + 6;
Â  Â  Â  Â  Â  Â  Â  Â  const gradeClass = gradeValue >= 70 ? 'first-class' :
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â gradeValue >= 60 ? 'upper-second-class' :
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â gradeValue >= 50 ? 'lower-second-class' : 'third-class';
Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={actualIndex} className={`grade-item ${gradeClass}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grade-label">{subjects[actualIndex]}</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grade-value">{gradeValue}%</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grade-description">{getGradeDescription(gradeValue)}</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grade-weight">Counts as 2 marks</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  return null;
Â  Â  Â  Â  Â  Â  })}

Â  Â  Â  Â  Â  Â  {/* Show message if no grades entered */}
Â  Â  Â  Â  Â  Â  {grades.every(grade => !grade || isNaN(Number(grade)) || Number(grade) === 0) && (
Â  Â  Â  Â  Â  Â  Â  <div className="no-grades-message">
Â  Â  Â  Â  Â  Â  Â  Â  <p>Enter your grades above to see the breakdown here</p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </table>
Â  Â  Â  {/* Only show classification results if ALL subjects have grades entered */}
Â  Â  Â  {grades.every(grade => grade && !isNaN(Number(grade)) && Number(grade) > 0) && (
Â  Â  Â  Â  <div className="results-section">
Â  Â  Â  Â  Â  <div className="classification-result">
Â  Â  Â  Â  Â  Â  <h2>Current Classification: {honorsClass}</h2>
Â  Â  Â  Â  Â  Â  <h3>Average Mark: {averageClassificationMark.toFixed(2)}%</h3>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="breakdown-section">
Â  Â  Â  Â  Â  Â  <h3>Classification Marks Breakdown:</h3>
Â  Â  Â  Â  Â  Â  <div className="breakdown-grid">
Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-item first-class">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-label">First Class (70%+)</div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-count">{classificationMarksBreakdown.firstClass} marks</div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-progress">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="progress-bar first-class-progress"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{ width: `${(classificationMarksBreakdown.firstClass / 20) * 100}%` }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  ></div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-item upper-second-class">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-label">Upper Second (60-69%)</div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-count">{classificationMarksBreakdown.upperSecondClass} marks</div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-progress">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="progress-bar upper-second-progress"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{ width: `${(classificationMarksBreakdown.upperSecondClass / 20) * 100}%` }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  ></div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-item lower-second-class">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-label">Lower Second (50-59%)</div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-count">{classificationMarksBreakdown.lowerSecondClass} marks</div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-progress">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="progress-bar lower-second-progress"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{ width: `${(classificationMarksBreakdown.lowerSecondClass / 20) * 100}%` }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  ></div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-item third-class">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-label">Third Class (40-49%)</div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-count">{classificationMarksBreakdown.thirdClass} marks</div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="breakdown-progress">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="progress-bar third-class-progress"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{ width: `${(classificationMarksBreakdown.thirdClass / 20) * 100}%` }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  ></div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  <table className="gpa-conversion">
Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <th>UK Degree Classification</th>
Â  Â  Â  Â  Â  Â  <th>Equivalent Percentage Range</th>
Â  Â  Â  Â  Â  Â  <th>Approximate GPA (US)</th>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  </thead>
Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>First Class (1st)</td>
Â  Â  Â  Â  Â  Â  <td>70-100%</td>
Â  Â  Â  Â  Â  Â  <td>3.7-4.0</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>Upper Second Class (2:1)</td>
Â  Â  Â  Â  Â  Â  <td>60-69%</td>
Â  Â  Â  Â  Â  Â  <td>3.3-3.6</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>Lower Second Class (2:2)</td>
Â  Â  Â  Â  Â  Â  <td>50-59%</td>
Â  Â  Â  Â  Â  Â  <td>2.7-3.2</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td>Third Class</td>
Â  Â  Â  Â  Â  Â  <td>40-49%</td>
Â  Â  Â  Â  Â  Â  <td>2.0-2.6</td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  </tbody>
Â  Â  Â  </table>

Â  Â  </div>
Â  );
};

export default GPACalculator;